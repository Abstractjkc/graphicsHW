#include "GameApp.h"
#include "d3dUtil.h"
#include "DXTrace.h"
using namespace DirectX;

const D3D11_INPUT_ELEMENT_DESC GameApp::VertexPosColor::inputLayout[2] = {
	{ "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0 },
	{ "COLOR", 0, DXGI_FORMAT_R32G32B32A32_FLOAT, 0, 12, D3D11_INPUT_PER_VERTEX_DATA, 0 }
};

GameApp::GameApp(HINSTANCE hInstance)
	: D3DApp(hInstance), m_CBuffer()
{
}

GameApp::~GameApp()
{
}

bool GameApp::Init()
{
	if (!D3DApp::Init())
		return false;

	if (!InitEffect())
		return false;

	if (!InitResource())
		return false;

	return true;
}

void GameApp::OnResize()
{
	D3DApp::OnResize();
}

void GameApp::UpdateScene(float dt)
{
	
	static float phi = 0.0f, theta = 0.0f;
	phi += 0.0001f, theta += 0.00015f;
	m_CBuffer.world = XMMatrixTranspose(XMMatrixRotationX(phi) * XMMatrixRotationY(theta));
	// 更新常量缓冲区，让立方体转起来
	D3D11_MAPPED_SUBRESOURCE mappedData;
	HR(m_pd3dImmediateContext->Map(m_pConstantBuffer.Get(), 0, D3D11_MAP_WRITE_DISCARD, 0, &mappedData));
	memcpy_s(mappedData.pData, sizeof(m_CBuffer), &m_CBuffer, sizeof(m_CBuffer));
	m_pd3dImmediateContext->Unmap(m_pConstantBuffer.Get(), 0);
}

void GameApp::DrawScene()
{
	assert(m_pd3dImmediateContext);
	assert(m_pSwapChain);

	static float black[4] = { 0.0f, 0.0f, 0.0f, 1.0f };	// RGBA = (0,0,0,255)
	m_pd3dImmediateContext->ClearRenderTargetView(m_pRenderTargetView.Get(), reinterpret_cast<const float*>(&black));
	m_pd3dImmediateContext->ClearDepthStencilView(m_pDepthStencilView.Get(), D3D11_CLEAR_DEPTH | D3D11_CLEAR_STENCIL, 1.0f, 0);

	// 共900个
	m_pd3dImmediateContext->DrawIndexed(12 * 9 * 3, 0, 0);
	//m_pd3dImmediateContext->DrawIndexed(12 * 7 * 3, 12 * 9 * 3, 0);
	//m_pd3dImmediateContext->DrawIndexed(2 * 12 * 3, 12 * 16 * 3, 0);
	//m_pd3dImmediateContext->DrawIndexed(12 * 7 * 3, 12 * 18 * 3, 0);
	HR(m_pSwapChain->Present(0, 0));
}


bool GameApp::InitEffect()
{
	ComPtr<ID3DBlob> blob;

	// 创建顶点着色器
	HR(CreateShaderFromFile(L"HLSL\\Cube_VS.cso", L"HLSL\\Cube_VS.hlsl", "VS", "vs_5_0", blob.ReleaseAndGetAddressOf()));
	HR(m_pd3dDevice->CreateVertexShader(blob->GetBufferPointer(), blob->GetBufferSize(), nullptr, m_pVertexShader.GetAddressOf()));
	// 创建顶点布局
	HR(m_pd3dDevice->CreateInputLayout(VertexPosColor::inputLayout, ARRAYSIZE(VertexPosColor::inputLayout),
		blob->GetBufferPointer(), blob->GetBufferSize(), m_pVertexLayout.GetAddressOf()));

	// 创建像素着色器
	HR(CreateShaderFromFile(L"HLSL\\Cube_PS.cso", L"HLSL\\Cube_PS.hlsl", "PS", "ps_5_0", blob.ReleaseAndGetAddressOf()));
	HR(m_pd3dDevice->CreatePixelShader(blob->GetBufferPointer(), blob->GetBufferSize(), nullptr, m_pPixelShader.GetAddressOf()));

	return true;
}

bool GameApp::InitResource()
{
	// ******************
	// 由py脚本读取obj文件中的顶点数据
	VertexPosColor vertices[] =
	{
		{ XMFLOAT3(-1.15026085f,0.6958430999999999f,1.00268205f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(-1.38371885f,0.5333124499999999f,1.00268205f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(-1.40660805f,0.5874396f,1.00268205f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(-1.1273716999999999f,0.6417159f,1.00268205f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(-1.40660805f,0.5874396f,1.06145f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(-1.1273716999999999f,0.6417159f,1.06145f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(-1.15026085f,0.6958430999999999f,1.06145f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(-1.38371885f,0.5333124499999999f,1.06145f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(-1.11386495f,0.7948114500000001f,1.00268205f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-1.3858421f,0.87816185f,1.00268205f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(-1.3573857999999999f,0.9295808f,1.00268205f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(-1.14232125f,0.74339255f,1.00268205f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(-1.3573857999999999f,0.9295808f,1.06145f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(-1.14232125f,0.74339255f,1.06145f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(-1.11386495f,0.7948114500000001f,1.06145f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(-1.3858421f,0.87816185f,1.06145f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(-0.5675639f,0.9850521499999999f,0.9994457499999999f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(-1.0308236f,0.9198116000000001f,0.9994457499999999f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(-1.0308236f,0.9850521499999999f,0.9994457499999999f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-0.5675639f,0.9198116000000001f,0.9994457499999999f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(-1.0308236f,0.9850521499999999f,1.0646863500000001f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(-0.5675639f,0.9198116000000001f,1.0646863500000001f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(-0.5675639f,0.9850521499999999f,1.0646863500000001f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(-1.0308236f,0.9198116000000001f,1.0646863500000001f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(-0.8285264000000001f,0.9198115f,1.00381225f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(-0.885034f,0.487065835f,1.00381225f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(-0.885034f,0.9198115f,1.00381225f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(-0.8285264000000001f,0.487065835f,1.00381225f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(-0.885034f,0.9198115f,1.06031985f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(-0.8285264000000001f,0.487065835f,1.06031985f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-0.8285264000000001f,0.9198115f,1.06031985f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(-0.885034f,0.487065835f,1.06031985f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(-0.40441107f,0.493537935f,0.9994457499999999f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(-0.46965156f,0.24130858500000002f,0.9994457499999999f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(-0.46965156f,0.493537935f,0.9994457499999999f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-0.40441107f,0.24130858500000002f,0.9994457499999999f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-0.46965156f,0.493537935f,1.0646863500000001f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(-0.40441107f,0.24130858500000002f,1.0646863500000001f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(-0.40441107f,0.493537935f,1.0646863500000001f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(-0.46965156f,0.24130858500000002f,1.0646863500000001f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(-0.45142613499999995f,0.28157904500000003f,1.0103362f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(-0.60551075f,0.283736365f,1.0103362f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(-0.59267165f,0.32525621499999996f,1.0103362f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(-0.46426527f,0.240059195f,1.0103362f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(-0.59267165f,0.32525621499999996f,1.0537959f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(-0.46426527f,0.240059195f,1.0537959f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(-0.45142613499999995f,0.28157904500000003f,1.0537959f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-0.60551075f,0.283736365f,1.0537959f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(-0.56972075f,0.9198115f,0.9918428f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(-0.65016715f,0.55662165f,0.9918428f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(-0.65016715f,0.9198115f,0.9918428f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(-0.56972075f,0.55662165f,0.9918428f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(-0.65016715f,0.9198115f,1.07228925f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(-0.56972075f,0.55662165f,1.07228925f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(-0.56972075f,0.9198115f,1.07228925f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(-0.65016715f,0.55662165f,1.07228925f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-0.469651595f,0.397884735f,1.0146514500000001f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(-1.1133247f,0.36305543f,1.0146514500000001f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(-1.1133247f,0.397884735f,1.0146514500000001f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(-0.469651595f,0.36305543f,1.0146514500000001f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(-1.1133247f,0.397884735f,1.04948065f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(-0.469651595f,0.36305543f,1.04948065f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(-0.469651595f,0.397884735f,1.04948065f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(-1.1133247f,0.36305543f,1.04948065f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-0.404411035f,0.55662225f,1.00812735f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(-0.8285264000000001f,0.49138155000000006f,1.00812735f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(-0.8285264000000001f,0.55662225f,1.00812735f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(-0.404411035f,0.49138155000000006f,1.00812735f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(-0.8285264000000001f,0.55662225f,1.05600475f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(-0.404411035f,0.49138155000000006f,1.05600475f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(-0.404411035f,0.55662225f,1.05600475f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-0.8285264000000001f,0.49138155000000006f,1.05600475f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(0.9216312999999999f,0.99813245f,0.99944515f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(0.458371525f,0.9328919f,0.99944515f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(0.458371525f,0.99813245f,0.99944515f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(0.9216312999999999f,0.9328919f,0.99944515f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.458371525f,0.99813245f,1.06468575f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(0.9216312999999999f,0.9328919f,1.06468575f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.9216312999999999f,0.99813245f,1.06468575f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(0.458371525f,0.9328919f,1.06468575f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.6606687499999999f,0.9328919f,1.0038116499999998f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(0.60416115f,0.50014625f,1.0038116499999998f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(0.60416115f,0.9328919f,1.0038116499999998f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.6606687499999999f,0.50014625f,1.0038116499999998f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(0.60416115f,0.9328919f,1.06031925f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(0.6606687499999999f,0.50014625f,1.06031925f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(0.6606687499999999f,0.9328919f,1.06031925f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(0.60416115f,0.50014625f,1.06031925f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(1.0847841f,0.5066183f,0.99944515f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(1.0195437f,0.254388975f,0.99944515f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(1.0195437f,0.5066183f,0.99944515f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(1.0847841f,0.254388975f,0.99944515f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(1.0195437f,0.5066183f,1.06468575f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(1.0847841f,0.254388975f,1.06468575f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(1.0847841f,0.5066183f,1.06468575f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(1.0195437f,0.254388975f,1.06468575f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(1.03776895f,0.294659415f,1.0103356f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.8836844f,0.296816735f,1.0103356f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.8965235f,0.3383366f,1.0103356f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(1.0249298f,0.253139565f,1.0103356f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(0.8965235f,0.3383366f,1.0537953f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(1.0249298f,0.253139565f,1.0537953f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(1.03776895f,0.294659415f,1.0537953f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(0.8836844f,0.296816735f,1.0537953f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.91947445f,0.9328919f,0.99184225f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(0.839028f,0.5697019999999999f,0.99184225f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(0.839028f,0.9328919f,0.99184225f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(0.91947445f,0.5697019999999999f,0.99184225f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.839028f,0.9328919f,1.0722887f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.91947445f,0.5697019999999999f,1.0722887f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(0.91947445f,0.9328919f,1.0722887f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(0.839028f,0.5697019999999999f,1.0722887f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(1.0195435499999999f,0.41096508499999995f,1.01465085f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(0.375870465f,0.37613578000000003f,1.01465085f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.375870465f,0.41096508499999995f,1.01465085f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(1.0195435499999999f,0.37613578000000003f,1.01465085f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(0.375870465f,0.41096508499999995f,1.0494800499999999f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(1.0195435499999999f,0.37613578000000003f,1.0494800499999999f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(1.0195435499999999f,0.41096508499999995f,1.0494800499999999f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(0.375870465f,0.37613578000000003f,1.0494800499999999f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(1.0847842f,0.56970265f,1.00812675f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(0.6606688500000001f,0.50446195f,1.00812675f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(0.6606688500000001f,0.56970265f,1.00812675f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(1.0847842f,0.50446195f,1.00812675f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.6606688500000001f,0.56970265f,1.0560041500000001f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(1.0847842f,0.50446195f,1.0560041500000001f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(1.0847842f,0.56970265f,1.0560041500000001f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.6606688500000001f,0.50446195f,1.0560041500000001f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(-0.8297745f,0.007741526f,0.9252038f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(-0.9795037500000001f,-1.1571976f,0.9252038f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(-0.9795037500000001f,0.007741526f,0.9252038f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(-0.8297745f,-1.1571976f,0.9252038f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(-0.9795037500000001f,0.007741526f,1.07493305f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(-0.8297745f,-1.1571976f,1.07493305f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(-0.8297745f,0.007741526f,1.07493305f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(-0.9795037500000001f,-1.1571976f,1.07493305f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(-0.346464665f,-0.5575677f,0.93827025f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(-0.79905985f,-0.448353365f,0.93827025f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(-0.7392128f,-0.34021292000000003f,0.93827025f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-0.40631174999999997f,-0.6657082000000001f,0.93827025f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-0.7392128f,-0.34021292000000003f,1.0618666f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(-0.40631174999999997f,-0.6657082000000001f,1.0618666f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-0.346464665f,-0.5575677f,1.0618666f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(-0.79905985f,-0.448353365f,1.0618666f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(1.3568749999999998f,-0.22650727999999998f,0.9219752999999999f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(0.21161351500000003f,-0.331532135f,0.9219752999999999f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.21161351500000003f,-0.22650727999999998f,0.9219752999999999f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(1.3568749999999998f,-0.331532135f,0.9219752999999999f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.21161351500000003f,-0.22650727999999998f,1.0781615f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(1.3568749999999998f,-0.331532135f,1.0781615f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(1.3568749999999998f,-0.22650727999999998f,1.0781615f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.21161351500000003f,-0.331532135f,1.0781615f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.7450325f,-0.037726853000000005f,0.95779335f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(0.6604823999999999f,-0.66247115f,0.95779335f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(0.6604823999999999f,-0.037726853000000005f,0.95779335f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(0.7450325f,-0.66247115f,0.95779335f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(0.6604823999999999f,-0.037726853000000005f,1.0423434500000002f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.7450325f,-0.66247115f,1.0423434500000002f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(0.7450325f,-0.037726853000000005f,1.0423434500000002f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.6604823999999999f,-0.66247115f,1.0423434500000002f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.9793654f,-0.0442050585f,0.99361145f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(0.89481535f,-0.66894935f,0.99361145f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(0.89481535f,-0.0442050585f,0.99361145f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(0.9793654f,-0.66894935f,0.99361145f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.89481535f,-0.0442050585f,1.0781615f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(0.9793654f,-0.66894935f,1.0781615f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(0.9793654f,-0.0442050585f,1.0781615f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(0.89481535f,-0.66894935f,1.0781615f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(0.485657455f,-0.0117860735f,0.99361145f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.40110744500000006f,-1.0005658f,0.99361145f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(0.40110744500000006f,-0.0117860735f,0.99361145f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(0.485657455f,-1.0005658f,0.99361145f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(0.40110744500000006f,-0.0117860735f,1.0781615f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(0.485657455f,-1.0005658f,1.0781615f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(0.485657455f,-0.0117860735f,1.0781615f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(0.40110744500000006f,-1.0005658f,1.0781615f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(1.2985283f,-0.9027958f,0.95118345f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.445959715f,-1.00056575f,0.95118345f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.445959715f,-0.9027958f,0.95118345f), XMFLOAT4(0, 1, 0, 1.0f) },
{ XMFLOAT3(1.2985283f,-1.00056575f,0.95118345f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(0.445959715f,-0.9027958f,1.0489534f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(1.2985283f,-1.00056575f,1.0489534f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(1.2985283f,-0.9027958f,1.0489534f), XMFLOAT4(1, 0, 0, 1.0f) },
{ XMFLOAT3(0.445959715f,-1.00056575f,1.0489534f), XMFLOAT4(1, 1, 0, 1.0f) },
{ XMFLOAT3(0.9728545500000001f,-0.584093f,0.95118345f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.6604823999999999f,-0.6818630000000001f,0.95118345f), XMFLOAT4(0, 1, 1, 1.0f) },
{ XMFLOAT3(0.6604823999999999f,-0.584093f,0.95118345f), XMFLOAT4(1, 1, 1, 1.0f) },
{ XMFLOAT3(0.9728545500000001f,-0.6818630000000001f,0.95118345f), XMFLOAT4(0, 0, 1, 1.0f) },
{ XMFLOAT3(0.6604823999999999f,-0.584093f,1.0489534f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(0.9728545500000001f,-0.6818630000000001f,1.0489534f), XMFLOAT4(0, 0, 0, 1.0f) },
{ XMFLOAT3(0.9728545500000001f,-0.584093f,1.0489534f), XMFLOAT4(1, 0, 1, 1.0f) },
{ XMFLOAT3(0.6604823999999999f,-0.6818630000000001f,1.0489534f), XMFLOAT4(1, 0, 0, 1.0f) },


	};
	// 设置顶点缓冲区描述
	D3D11_BUFFER_DESC vbd;
	ZeroMemory(&vbd, sizeof(vbd));
	vbd.Usage = D3D11_USAGE_IMMUTABLE;
	vbd.ByteWidth = sizeof vertices;
	vbd.BindFlags = D3D11_BIND_VERTEX_BUFFER;
	vbd.CPUAccessFlags = 0;
	// 新建顶点缓冲区
	D3D11_SUBRESOURCE_DATA InitData;
	ZeroMemory(&InitData, sizeof(InitData));
	InitData.pSysMem = vertices;
	HR(m_pd3dDevice->CreateBuffer(&vbd, &InitData, m_pVertexBuffer.GetAddressOf()));

	// ******************
	// 索引数组
	// 由py脚本读取obj文件中的数据
	WORD indices[] = {
		0,1,2,
0,3,1,
4,5,6,
4,7,5,
6,3,0,
6,5,3,
2,7,4,
2,1,7,
2,6,0,
2,4,6,
7,3,5,
7,1,3,
8,9,10,
8,11,9,
12,13,14,
12,15,13,
14,11,8,
14,13,11,
10,15,12,
10,9,15,
10,14,8,
10,12,14,
15,11,13,
15,9,11,
16,17,18,
16,19,17,
20,21,22,
20,23,21,
22,19,16,
22,21,19,
18,23,20,
18,17,23,
18,22,16,
18,20,22,
23,19,21,
23,17,19,
24,25,26,
24,27,25,
28,29,30,
28,31,29,
30,27,24,
30,29,27,
26,31,28,
26,25,31,
26,30,24,
26,28,30,
31,27,29,
31,25,27,
32,33,34,
32,35,33,
36,37,38,
36,39,37,
38,35,32,
38,37,35,
34,39,36,
34,33,39,
34,38,32,
34,36,38,
39,35,37,
39,33,35,
40,41,42,
40,43,41,
44,45,46,
44,47,45,
46,43,40,
46,45,43,
42,47,44,
42,41,47,
42,46,40,
42,44,46,
47,43,45,
47,41,43,
48,49,50,
48,51,49,
52,53,54,
52,55,53,
54,51,48,
54,53,51,
50,55,52,
50,49,55,
50,54,48,
50,52,54,
55,51,53,
55,49,51,
56,57,58,
56,59,57,
60,61,62,
60,63,61,
62,59,56,
62,61,59,
58,63,60,
58,57,63,
58,62,56,
58,60,62,
63,59,61,
63,57,59,
64,65,66,
64,67,65,
68,69,70,
68,71,69,
70,67,64,
70,69,67,
66,71,68,
66,65,71,
66,70,64,
66,68,70,
71,67,69,
71,65,67,
72,73,74,
72,75,73,
76,77,78,
76,79,77,
78,75,72,
78,77,75,
74,79,76,
74,73,79,
74,78,72,
74,76,78,
79,75,77,
79,73,75,
80,81,82,
80,83,81,
84,85,86,
84,87,85,
86,83,80,
86,85,83,
82,87,84,
82,81,87,
82,86,80,
82,84,86,
87,83,85,
87,81,83,
88,89,90,
88,91,89,
92,93,94,
92,95,93,
94,91,88,
94,93,91,
90,95,92,
90,89,95,
90,94,88,
90,92,94,
95,91,93,
95,89,91,
96,97,98,
96,99,97,
100,101,102,
100,103,101,
102,99,96,
102,101,99,
98,103,100,
98,97,103,
98,102,96,
98,100,102,
103,99,101,
103,97,99,
104,105,106,
104,107,105,
108,109,110,
108,111,109,
110,107,104,
110,109,107,
106,111,108,
106,105,111,
106,110,104,
106,108,110,
111,107,109,
111,105,107,
112,113,114,
112,115,113,
116,117,118,
116,119,117,
118,115,112,
118,117,115,
114,119,116,
114,113,119,
114,118,112,
114,116,118,
119,115,117,
119,113,115,
120,121,122,
120,123,121,
124,125,126,
124,127,125,
126,123,120,
126,125,123,
122,127,124,
122,121,127,
122,126,120,
122,124,126,
127,123,125,
127,121,123,
128,129,130,
128,131,129,
132,133,134,
132,135,133,
134,131,128,
134,133,131,
130,135,132,
130,129,135,
130,134,128,
130,132,134,
135,131,133,
135,129,131,
136,137,138,
136,139,137,
140,141,142,
140,143,141,
142,139,136,
142,141,139,
138,143,140,
138,137,143,
138,142,136,
138,140,142,
143,139,141,
143,137,139,
144,145,146,
144,147,145,
148,149,150,
148,151,149,
150,147,144,
150,149,147,
146,151,148,
146,145,151,
146,150,144,
146,148,150,
151,147,149,
151,145,147,
152,153,154,
152,155,153,
156,157,158,
156,159,157,
158,155,152,
158,157,155,
154,159,156,
154,153,159,
154,158,152,
154,156,158,
159,155,157,
159,153,155,
152,153,154,
152,155,153,
156,157,158,
156,159,157,
158,155,152,
158,157,155,
154,159,156,
154,153,159,
154,158,152,
154,156,158,
159,155,157,
159,153,155,
160,161,162,
160,163,161,
164,165,166,
164,167,165,
166,163,160,
166,165,163,
162,167,164,
162,161,167,
162,166,160,
162,164,166,
167,163,165,
167,161,163,
168,169,170,
168,171,169,
172,173,174,
172,175,173,
174,171,168,
174,173,171,
170,175,172,
170,169,175,
170,174,168,
170,172,174,
175,171,173,
175,169,171,
176,177,178,
176,179,177,
180,181,182,
180,183,181,
182,179,176,
182,181,179,
178,183,180,
178,177,183,
178,182,176,
178,180,182,
183,179,181,
183,177,179,
184,185,186,
184,187,185,
188,189,190,
188,191,189,
190,187,184,
190,189,187,
186,191,188,
186,185,191,
186,190,184,
186,188,190,
191,187,189,
191,185,187,
	};
	// 设置索引缓冲区描述
	D3D11_BUFFER_DESC ibd;
	ZeroMemory(&ibd, sizeof(ibd));
	ibd.Usage = D3D11_USAGE_IMMUTABLE;
	ibd.ByteWidth = sizeof indices;
	ibd.BindFlags = D3D11_BIND_INDEX_BUFFER;
	ibd.CPUAccessFlags = 0;
	// 新建索引缓冲区
	InitData.pSysMem = indices;
	HR(m_pd3dDevice->CreateBuffer(&ibd, &InitData, m_pIndexBuffer.GetAddressOf()));
	// 输入装配阶段的索引缓冲区设置
	m_pd3dImmediateContext->IASetIndexBuffer(m_pIndexBuffer.Get(), DXGI_FORMAT_R16_UINT, 0);


	// ******************
	// 设置常量缓冲区描述
	//
	D3D11_BUFFER_DESC cbd;
	ZeroMemory(&cbd, sizeof(cbd));
	cbd.Usage = D3D11_USAGE_DYNAMIC;
	cbd.ByteWidth = sizeof(ConstantBuffer);
	cbd.BindFlags = D3D11_BIND_CONSTANT_BUFFER;
	cbd.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
	// 新建常量缓冲区，不使用初始数据
	HR(m_pd3dDevice->CreateBuffer(&cbd, nullptr, m_pConstantBuffer.GetAddressOf()));

	// 初始化常量缓冲区的值
	m_CBuffer.world = XMMatrixIdentity();	// 单位矩阵的转置是它本身
	m_CBuffer.view = XMMatrixTranspose(XMMatrixLookAtLH(
		XMVectorSet(0.0f, 0.0f, -5.0f, 0.0f),
		XMVectorSet(0.0f, 0.0f, 0.0f, 0.0f),
		XMVectorSet(0.0f, 1.0f, 0.0f, 0.0f)
	));
	m_CBuffer.proj = XMMatrixTranspose(XMMatrixPerspectiveFovLH(XM_PIDIV2, AspectRatio(), 1.0f, 1000.0f));


	// ******************
	// 给渲染管线各个阶段绑定好所需资源
	//

	// 输入装配阶段的顶点缓冲区设置
	UINT stride = sizeof(VertexPosColor);	// 跨越字节数
	UINT offset = 0;						// 起始偏移量

	m_pd3dImmediateContext->IASetVertexBuffers(0, 1, m_pVertexBuffer.GetAddressOf(), &stride, &offset);
	// 设置图元类型，设定输入布局
	m_pd3dImmediateContext->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);
	m_pd3dImmediateContext->IASetInputLayout(m_pVertexLayout.Get());
	// 将着色器绑定到渲染管线
	m_pd3dImmediateContext->VSSetShader(m_pVertexShader.Get(), nullptr, 0);
	// 将更新好的常量缓冲区绑定到顶点着色器
	m_pd3dImmediateContext->VSSetConstantBuffers(0, 1, m_pConstantBuffer.GetAddressOf());

	m_pd3dImmediateContext->PSSetShader(m_pPixelShader.Get(), nullptr, 0);

	// ******************
	// 设置调试对象名
	//
	D3D11SetDebugObjectName(m_pVertexLayout.Get(), "VertexPosColorLayout");
	D3D11SetDebugObjectName(m_pVertexBuffer.Get(), "VertexBuffer");
	D3D11SetDebugObjectName(m_pIndexBuffer.Get(), "IndexBuffer");
	D3D11SetDebugObjectName(m_pConstantBuffer.Get(), "ConstantBuffer");
	D3D11SetDebugObjectName(m_pVertexShader.Get(), "Cube_VS");
	D3D11SetDebugObjectName(m_pPixelShader.Get(), "Cube_PS");

	return true;
}
